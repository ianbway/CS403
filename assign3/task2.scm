; Ian Braudaway
; CS403 Assign 3, Task 2

(define (checkThisPair functionToLookIn replaceThis withThis)
	(cond
		((nil? functionToLookIn)
			'done)
		((integer? functionToLookIn)
			'done)
		((symbol? functionToLookIn)
			(cond
				((equal? functionToLookIn replaceThis) 
					(set! functionToLookIn withThis))
				(else
					'done
					)
			))
		((eq? 'quote functionToLookIn)
			'done)
		((eq? 'quote (car functionToLookIn))
		 	'done)
		((equal? (car functionToLookIn) replaceThis) 
			(set-car! functionToLookIn withThis)
			(checkThisPair (cdr functionToLookIn) replaceThis withThis))
		((object? functionToLookIn)
			(checkThisPair (get 'name functionToLookIn) replaceThis withThis)
			(checkThisPair (get 'parameters functionToLookIn) replaceThis withThis)
			(checkThisPair (get 'code functionToLookIn) replaceThis withThis))
		((>= (length functionToLookIn) 1)
			(cond
				((equal? (car functionToLookIn) replaceThis) 
					(set-car! functionToLookIn withThis)
					(checkThisPair (cdr functionToLookIn) replaceThis withThis))
				(else
					(checkThisPair (car functionToLookIn) replaceThis withThis)
					(checkThisPair (cdr functionToLookIn) replaceThis withThis)
					)
				))
		(else
			(checkThisPair (cdr functionToLookIn) replaceThis withThis)
			)
		)
	)

(define (replace functionToLookIn listOfReplacements)
	(define name (get 'name functionToLookIn))
	(define params (get 'parameters functionToLookIn))
	(define body (get 'code functionToLookIn))

	(cond 
		((nil? listOfReplacements) functionToLookIn)
		(else
			(checkThisPair functionToLookIn (car listOfReplacements) (cadr listOfReplacements))
			(replace functionToLookIn (cddr listOfReplacements))
			)
		)
	)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
	(define (iter expr)
		(if (not (eof?)) (begin (eval expr env) (iter (readExpr)))))
	(iter (readExpr))
	)

; (define (abs n) (if (< n 0) (- n) n))
; (replace abs (list '< < '- -))
; (inspect (get 'code abs))
; (newline)

; (define (square x) (* x x))
; (replace square (list '* +))
; (inspect (square 5))
; (newline)

; (include "pretty.lib")
; (define (square x) (* x x))
; (replace square (list 'x 'y))
; (pretty square)
; (inspect (square 48))
; (newline)

; (include "pretty.lib")
; (define (almost-square x) ((lambda (y) (* y y)) (+ x 1)))
; (inspect (almost-square 8))
; (replace almost-square (list '* * '+ +))
; (pretty almost-square)
; (inspect (almost-square 8))
; (newline)

; (include "pretty.lib")
; (define (almost-square x) ((lambda (y) (* y y)) (+ x 1)))
; (inspect (almost-square 15))
; (replace almost-square (list '* + '+ *))
; (pretty almost-square)
; (inspect (almost-square 15))
; (newline)

; (include "pretty.lib")
; (define (almost-square x)
;     ((lambda (y)
;         (inspect '(lambda (z) (+ (* x y) z)))
;         (* y y)) (+ x 1)))
; (inspect (almost-square 24))
; (replace almost-square (list '* * '+ +))
; (pretty almost-square)
; (inspect (almost-square 24))
; (newline)

; (include "pretty.lib")
; (define (f x)
;     ((lambda (y)
;         (define z ((lambda (q) (define w (- q q)) this) 5))
;         (inspect (z'w))
;         (* y y)) (+ x 1)))
; (inspect (f 80))
; (replace f (list '* * '+ + '- +))
; (pretty f)
; (inspect (f 80))
; (newline)
